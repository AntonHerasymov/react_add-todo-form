{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/ToDoForm/ToDoForm.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","ToDoForm","onAdd","users","useState","setUserId","setTitle","userError","setUserError","titleError","setTitleError","action","method","onSubmit","event","preventDefault","Boolean","type","value","onChange","target","disabled","getUserById","usersFromServer","find","getNewToDoId","Math","max","App","todosFromServer","setTodos","newTitle","currentToDos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f22a4d38.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { ToDo } from '../../types/ToDo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: ToDo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n      {user && (\n        <UserInfo user={user} />\n      )}\n\n    </article>\n  );\n};\n","import { ToDo } from '../../types/ToDo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: ToDo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          data-id={todo.id}\n          key={todo.id}\n          todo={todo}\n        />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  onAdd: (userId: number, newTitle: string) => void,\n  users: User[],\n};\n\nexport const ToDoForm: React.FC<Props> = ({ onAdd, users }) => {\n  const [userId, setUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [userError, setUserError] = useState(false);\n  const [titleError, setTitleError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!userId || !title) {\n      setUserError(Boolean(!userId));\n      setTitleError(Boolean(!title));\n\n      return;\n    }\n\n    onAdd(userId, title);\n\n    setUserError(false);\n    setTitleError(false);\n    setTitle('');\n    setUserId(0);\n  };\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n        />\n        {Boolean(titleError) && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={(event) => setUserId(+event.target.value)}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n          {users.map((user: User) => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {Boolean(userError) && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { ToDo } from './types/ToDo';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\nimport { ToDoForm } from './components/ToDoForm/ToDoForm';\n\ntype UserType = User | null;\n\nfunction getUserById(userId: number) : UserType {\n  return usersFromServer.find((user) => user.id === userId) || null;\n}\n\nfunction createToDos() {\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: getUserById(todo.userId),\n  }));\n}\n\nconst getNewToDoId = (todos: ToDo[]): number => {\n  const maxId: number = Math.max(...todos.map((todo) => todo.id));\n\n  return maxId + 1;\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState<ToDo[]>(createToDos());\n\n  const addToDo = (userId: number, newTitle: string) => {\n    const user: UserType = getUserById(userId);\n    const todo: ToDo = {\n      id: getNewToDoId(todos),\n      title: newTitle,\n      completed: false,\n      userId,\n      user,\n    };\n\n    if (user !== null) {\n      setTodos((currentToDos) => [...currentToDos, todo]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <ToDoForm onAdd={addToDo} users={usersFromServer} />\n\n      <TodoList todos={todos} />\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}